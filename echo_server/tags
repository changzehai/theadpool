!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
__THREAD_POOL_H_	thread_pool.h	11;"	d
_task_queue_t_	thread_pool.c	/^typedef struct _task_queue_t_$/;"	s	file:
_task_t_	thread_pool.c	/^typedef struct _task_t_$/;"	s	file:
_thread_pool_t_	thread_pool.c	/^typedef struct _thread_pool_t_$/;"	s	file:
arg	thread_pool.c	/^    void *arg;$/;"	m	struct:_task_t_	file:
echo_server_accpet_client_request	echo_server.c	/^void *echo_server_accpet_client_request(void *arg)$/;"	f
echo_server_error_exit	echo_server.c	/^static void echo_server_error_exit(const char *error)$/;"	f	file:
echo_server_startup	echo_server.c	/^static int echo_server_startup(void)$/;"	f	file:
gs_thread_pool	thread_pool.c	/^static thread_pool_t  *gs_thread_pool = NULL;$/;"	v	file:
head	thread_pool.c	/^    task_t *head; \/* 任务队列头 *\/$/;"	m	struct:_task_queue_t_	file:
main	echo_server.c	/^int main()$/;"	f
main	simple_client.c	/^int main()$/;"	f
max_thread_num	thread_pool.c	/^    int max_thread_num;$/;"	m	struct:_thread_pool_t_	file:
next	thread_pool.c	/^    struct _task_t_ *next;$/;"	m	struct:_task_t_	typeref:struct:_task_t_::_task_t_	file:
shutdown	thread_pool.c	/^    int shutdown;$/;"	m	struct:_thread_pool_t_	file:
tail	thread_pool.c	/^    task_t *tail; \/* 任务队列尾 *\/$/;"	m	struct:_task_queue_t_	file:
task_process	thread_pool.c	/^    void *(*task_process)(void *arg);$/;"	m	struct:_task_t_	file:
task_queue	thread_pool.c	/^    task_queue_t *task_queue;$/;"	m	struct:_thread_pool_t_	file:
task_queue_lock	thread_pool.c	/^    pthread_mutex_t task_queue_lock;$/;"	m	struct:_thread_pool_t_	file:
task_queue_ready	thread_pool.c	/^    pthread_cond_t task_queue_ready;$/;"	m	struct:_thread_pool_t_	file:
task_queue_t	thread_pool.c	/^} task_queue_t;$/;"	t	typeref:struct:_task_queue_t_	file:
task_t	thread_pool.c	/^} task_t;$/;"	t	typeref:struct:_task_t_	file:
thread_pool_add_task	thread_pool.c	/^int thread_pool_add_task(void *(*task_process) (void *arg), void *arg)$/;"	f
thread_pool_create_worker	thread_pool.c	/^static int thread_pool_create_worker(pthread_t **threads, int max_thread_num)$/;"	f	file:
thread_pool_destory	thread_pool.c	/^int thread_pool_destory()$/;"	f
thread_pool_init	thread_pool.c	/^int thread_pool_init(int max_thread_num)$/;"	f
thread_pool_t	thread_pool.c	/^} thread_pool_t;$/;"	t	typeref:struct:_thread_pool_t_	file:
thread_pool_task_queue_destory	thread_pool.c	/^static void thread_pool_task_queue_destory(task_queue_t *task_queue)$/;"	f	file:
thread_pool_task_queue_init	thread_pool.c	/^static int thread_pool_task_queue_init(task_queue_t **task_queue)$/;"	f	file:
thread_pool_task_queue_is_empty	thread_pool.c	/^static int thread_pool_task_queue_is_empty(task_queue_t *task_queue)$/;"	f	file:
thread_pool_task_queue_pop	thread_pool.c	/^static task_t *thread_pool_task_queue_pop(task_queue_t *task_queue)$/;"	f	file:
thread_pool_task_queue_print	thread_pool.c	/^void thread_pool_task_queue_print()$/;"	f
thread_pool_task_queue_push	thread_pool.c	/^static void thread_pool_task_queue_push(task_queue_t *task_queue, task_t *task)$/;"	f	file:
thread_pool_worker_id_print	thread_pool.c	/^void thread_pool_worker_id_print()$/;"	f
thread_worker_routine	thread_pool.c	/^static void *thread_worker_routine(void *arg)$/;"	f	file:
threads	thread_pool.c	/^    pthread_t *threads;$/;"	m	struct:_thread_pool_t_	file:
